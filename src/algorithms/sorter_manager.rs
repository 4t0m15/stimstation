use crate::algorithms::sorter::{SortVisualizer, SortAlgorithm, SortState, initialize_algorithm_stats, get_leading_algorithm};

static mut TOP_SORTER: Option<SortVisualizer> = None;
static mut BOTTOM_SORTER: Option<SortVisualizer> = None;
static mut LEFT_SORTER: Option<SortVisualizer> = None;
static mut RIGHT_SORTER: Option<SortVisualizer> = None;

pub fn initialize_sorters() {
    initialize_algorithm_stats();
    unsafe {
        if TOP_SORTER.is_none() {
            TOP_SORTER = Some(SortVisualizer::new(SortAlgorithm::Bubble));
        }
        if BOTTOM_SORTER.is_none() {
            BOTTOM_SORTER = Some(SortVisualizer::new(SortAlgorithm::Quick));
        }
        if LEFT_SORTER.is_none() {
            LEFT_SORTER = Some(SortVisualizer::new(SortAlgorithm::Bogo));
        }
        if RIGHT_SORTER.is_none() {
            RIGHT_SORTER = Some(SortVisualizer::new(SortAlgorithm::Quick));
        }
    }
}

pub fn draw_sorter_visualizations(frame: &mut [u8], width: u32, height: u32, time: f32, 
                                 scale_x: f32, scale_y: f32, x_offset: usize, buffer_width: u32) {
    let scale_factor = (scale_x + scale_y) / 2.0;
    let border_thickness = (height as f32 * 0.05 * scale_factor) as usize;
    let side_width = (width as f32 * 0.05 * scale_factor) as usize;
    
    unsafe {
        update_and_draw_sorter(&mut TOP_SORTER, frame, 0, 0, width as usize, border_thickness, 
                              true, time, x_offset, buffer_width);
        update_and_draw_sorter(&mut BOTTOM_SORTER, frame, 0, height as usize - border_thickness, 
                              width as usize, border_thickness, true, time, x_offset, buffer_width);
        update_and_draw_sorter(&mut LEFT_SORTER, frame, 0, border_thickness, side_width, 
                              height as usize - border_thickness * 2, false, time, x_offset, buffer_width);
        update_and_draw_sorter(&mut RIGHT_SORTER, frame, width as usize - side_width, border_thickness, 
                              side_width, height as usize - border_thickness * 2, false, time, x_offset, buffer_width);
    }
}

fn update_and_draw_sorter(sorter: &mut Option<SortVisualizer>, frame: &mut [u8], 
                         x: usize, y: usize, width: usize, height: usize, 
                         horizontal: bool, time: f32, x_offset: usize, buffer_width: u32) {
    if let Some(sorter) = sorter {
        sorter.update();
        if sorter.state == SortState::Completed && (time * 10.0).floor() % 10.0 == 0.0 {
            sorter.restart();
        }
        sorter.draw(frame, x, y, width, height, horizontal, x_offset, buffer_width as u32);
    }
}

pub fn restart_sorters() {
    unsafe {
        if let Some(sorter) = TOP_SORTER.as_mut() {
            sorter.restart();
        }
        if let Some(sorter) = BOTTOM_SORTER.as_mut() {
            sorter.restart();
        }
        if let Some(sorter) = LEFT_SORTER.as_mut() {
            sorter.restart();
        }
        if let Some(sorter) = RIGHT_SORTER.as_mut() {
            sorter.restart();
        }
    }
}

pub fn draw_algorithm_stats(frame: &mut [u8], width: u32, height: u32, x_offset: usize, buffer_width: u32) {
    if let Some((algorithm, count)) = get_leading_algorithm() {
        let text = format!("({}) - {}", count, algorithm.name());
        draw_stats_text(frame, &text, 20, 20, [255, 255, 255, 255], width, x_offset, buffer_width);
    }
}

fn draw_stats_text(frame: &mut [u8], text: &str, x: u32, y: u32, color: [u8; 4], 
                   frame_width: u32, x_offset: usize, buffer_width: u32) {
    let char_width = 8;
    let char_height = 12;
    
    for (i, ch) in text.chars().enumerate() {
        let char_x = x + (i as u32 * char_width);
        draw_char(frame, ch, char_x, y, color, frame_width, char_width, char_height, x_offset, buffer_width);
    }
}

fn draw_char(frame: &mut [u8], ch: char, x: u32, y: u32, color: [u8; 4], 
             frame_width: u32, char_width: u32, _char_height: u32, x_offset: usize, buffer_width: u32) {
    // Simple bitmap font for basic characters
    let pattern = get_char_pattern(ch);

    for (i, &pixel) in pattern.iter().enumerate() {
        if pixel > 0 {
            let px = x + (i as u32 % char_width);
            let py = y + (i as u32 / char_width);
            
            if px < frame_width && py < frame.len() as u32 / 4 / buffer_width {
                let index = (((py * buffer_width + px + x_offset as u32) * 4) as usize).min(frame.len() - 4);
                if index + 3 < frame.len() {
                    frame[index] = color[0];
                    frame[index + 1] = color[1];
                    frame[index + 2] = color[2];
                    frame[index + 3] = color[3];
                }
            }
        }
    }
}

fn get_char_pattern(ch: char) -> Vec<u8> {
    // 8x12 bitmap patterns for characters
    match ch {
        '0' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,1,
            1,1,0,0,1,0,1,1,
            1,1,0,1,0,0,1,1,
            1,1,1,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        '1' => vec![
            0,0,0,1,1,0,0,0,
            0,0,1,1,1,0,0,0,
            0,1,1,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            1,1,1,1,1,1,1,1,
        ],
        '2' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,1,1,0,
            0,0,0,0,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,0,0,0,0,
            0,1,1,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,
        ],
        '3' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,1,1,0,
            0,0,1,1,1,1,0,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        '4' => vec![
            0,0,0,0,0,1,1,0,
            0,0,0,0,1,1,1,0,
            0,0,0,1,1,1,1,0,
            0,0,1,1,0,1,1,0,
            0,1,1,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
        ],
        '5' => vec![
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        '6' => vec![
            0,0,1,1,1,1,1,0,
            0,1,1,0,0,0,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,1,1,1,1,0,
            1,1,1,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,0,0,0,1,1,
            0,0,1,1,1,1,1,0,
        ],
        '7' => vec![
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,1,1,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,1,1,0,0,
            0,0,0,0,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,0,0,0,0,
            0,0,1,1,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,1,1,0,0,0,0,0,
        ],
        '8' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,0,0,1,1,0,
            0,0,1,1,1,1,0,0,
            0,1,1,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        '9' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,1,
            0,1,1,1,1,0,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            1,1,0,0,0,1,1,0,
            0,1,1,1,1,1,0,0,
        ],
        'A' => vec![
            0,0,1,1,1,1,0,0,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'B' => vec![
            1,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,0,
            1,1,1,1,1,1,0,0,
            1,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,0,
        ],
        'C' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        'D' => vec![
            1,1,1,1,1,1,0,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,0,
            1,1,1,1,1,1,0,0,
        ],
        'E' => vec![
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,1,1,1,1,0,0,
            1,1,1,1,1,1,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,1,1,1,1,1,1,
        ],
        'F' => vec![
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,1,1,1,1,0,0,
            1,1,1,1,1,1,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
        ],
        'G' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,1,1,1,1,
            1,1,0,0,1,1,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        'H' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'I' => vec![
            1,1,1,1,1,1,1,1,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            1,1,1,1,1,1,1,1,
        ],
        'J' => vec![
            0,0,0,0,1,1,1,1,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            0,1,1,1,1,1,0,0,
        ],
        'K' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,0,
            1,1,0,0,1,1,0,0,
            1,1,0,1,1,0,0,0,
            1,1,1,1,0,0,0,0,
            1,1,1,0,0,0,0,0,
            1,1,1,1,0,0,0,0,
            1,1,0,1,1,0,0,0,
            1,1,0,0,1,1,0,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
        ],
        'L' => vec![
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,
        ],
        'M' => vec![
            1,1,0,0,0,0,1,1,
            1,1,1,0,0,1,1,1,
            1,1,1,1,1,1,1,1,
            1,1,0,1,1,0,1,1,
            1,1,0,1,1,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'N' => vec![
            1,1,0,0,0,0,1,1,
            1,1,1,0,0,0,1,1,
            1,1,1,1,0,0,1,1,
            1,1,0,1,1,0,1,1,
            1,1,0,1,1,0,1,1,
            1,1,0,0,1,1,1,1,
            1,1,0,0,1,1,1,1,
            1,1,0,0,0,1,1,1,
            1,1,0,0,0,1,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'O' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        'P' => vec![
            1,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,1,1,1,1,1,0,
            1,1,1,1,1,1,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
        ],
        'Q' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,1,0,1,1,
            1,1,0,0,0,1,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,1,
        ],
        'R' => vec![
            1,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,1,1,0,
            1,1,1,1,1,1,0,0,
            1,1,1,1,1,1,0,0,
            1,1,0,0,1,1,0,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'S' => vec![
            0,1,1,1,1,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,0,1,1,1,1,0,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        'T' => vec![
            1,1,1,1,1,1,1,1,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
        ],
        'U' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,1,1,1,1,0,
        ],
        'V' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            0,0,1,1,1,1,0,0,
            0,0,1,1,1,1,0,0,
            0,0,0,1,1,0,0,0,
        ],
        'W' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,1,1,0,1,1,
            1,1,0,1,1,0,1,1,
            1,1,1,1,1,1,1,1,
            1,1,1,0,0,1,1,1,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'X' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            0,0,1,1,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,1,1,0,0,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
        ],
        'Y' => vec![
            1,1,0,0,0,0,1,1,
            1,1,0,0,0,0,1,1,
            0,1,1,0,0,1,1,0,
            0,1,1,0,0,1,1,0,
            0,0,1,1,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,1,1,0,0,0,
        ],
        'Z' => vec![
            1,1,1,1,1,1,1,1,
            0,0,0,0,0,0,1,1,
            0,0,0,0,0,1,1,0,
            0,0,0,0,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,0,0,0,0,
            0,1,1,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,0,0,0,0,0,0,
            1,1,1,1,1,1,1,1,
        ],
        ' ' => vec![0; 96], // Space
        '(' => vec![
            0,0,0,0,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,0,0,0,0,
            0,0,1,1,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,1,1,0,0,0,0,0,
            0,0,1,1,0,0,0,0,
            0,0,1,1,0,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,0,1,1,0,0,
        ],
        ')' => vec![
            0,0,1,1,0,0,0,0,
            0,0,0,1,1,0,0,0,
            0,0,0,0,1,1,0,0,
            0,0,0,0,1,1,0,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,0,
            0,0,0,0,1,1,0,0,
            0,0,0,0,1,1,0,0,
            0,0,0,1,1,0,0,0,
            0,0,1,1,0,0,0,0,
        ],
        '-' => vec![
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            1,1,1,1,1,1,1,1,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
        ],
        _ => vec![1; 96], // Default block pattern for unknown characters
    }
}
